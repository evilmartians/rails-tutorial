diff --git a/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js b/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js
index e253906..1efc1db 100644
--- a/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js
+++ b/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js
@@ -459,7 +459,7 @@ export class TutorialRunner {
             clearTimeout(timeoutId);
             timeoutId = setTimeout(readFiles, 100);
         };
-        this._watcher = webcontainer.fs.watch('.', { recursive: true }, (eventType, filename) => {
+        this._watcher = webcontainer.fs.watch('.', { recursive: true }, async (eventType, filename) => {
             const filePath = `/${filename}`;
             // events we should ignore because we caused them in the TutorialRunner
             if (!this._ignoreFileEvents.decrement(filePath)) {
@@ -499,7 +499,8 @@ export class TutorialRunner {
                         }
                     });
                     if (!this._editorStore.documents.get()[filePath]) {
-                        this._editorStore.addFileOrFolder({ path: filePath, type: 'file' });
+                        const isDirectory = await _isDirectory(webcontainer, filePath);
+                        this._editorStore.addFileOrFolder({ path: filePath, type: isDirectory ? 'folder' : 'file' });
                     }
                     this._updateCurrentFiles({ [filePath]: '' });
                     scheduleReadFor(filePath, 'utf-8');
@@ -543,3 +544,12 @@ async function updateFiles(webcontainer, previousFiles, newFiles) {
     }
     await webcontainer.mount(toFileTree(addedOrModified));
 }
+
+async function _isDirectory(webcontainer, filePath) {
+  try {
+    await webcontainer.fs.readdir(filePath);
+    return true;
+  } catch (error) {
+    return false;
+  }
+}
diff --git a/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js b/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js
index 046165d..d1ecbdd 100644
--- a/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js
+++ b/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js
@@ -10,11 +10,15 @@ export async function newJSHProcess(webcontainer, terminal, options) {
         args.push('--allow-commands', options.allowCommands.join(','));
     }
     // we spawn a JSH process with a fallback cols and rows in case the process is not attached yet to a visible terminal
+    console.log('WC Path', `${webcontainer.workdir}/bin:${webcontainer.path}`);
     const process = await webcontainer.spawn('/bin/jsh', ['--osc', ...args], {
         terminal: {
             cols: terminal.cols ?? 80,
             rows: terminal.rows ?? 15,
         },
+        env: {
+          PATH: `${webcontainer.workdir}/_bin:${webcontainer.path}`,
+        },
     });
     const input = process.input.getWriter();
     const output = process.output;
