diff --git a/node_modules/@tutorialkit/runtime/dist/store/index.js b/node_modules/@tutorialkit/runtime/dist/store/index.js
index a0d73ec..b2f2ec2 100644
--- a/node_modules/@tutorialkit/runtime/dist/store/index.js
+++ b/node_modules/@tutorialkit/runtime/dist/store/index.js
@@ -106,7 +106,8 @@ export class TutorialStore {
         this._lessonTask = newTask(async (signal) => {
             const templatePromise = this._lessonFilesFetcher.getLessonTemplate(lesson);
             const filesPromise = this._lessonFilesFetcher.getLessonFiles(lesson);
-            const preparePromise = this._runner.prepareFiles({ template: templatePromise, files: filesPromise, signal });
+            const removePaths = lesson?.data?.custom?.fs?.remove;
+            const preparePromise = this._runner.prepareFiles({ template: templatePromise, files: filesPromise, signal, removePaths });
             this._runner.runCommands();
             const [template, solution, files] = await Promise.all([
                 templatePromise,
diff --git a/node_modules/@tutorialkit/runtime/dist/store/terminal.js b/node_modules/@tutorialkit/runtime/dist/store/terminal.js
index 31edbb5..18be6b8 100644
--- a/node_modules/@tutorialkit/runtime/dist/store/terminal.js
+++ b/node_modules/@tutorialkit/runtime/dist/store/terminal.js
@@ -45,6 +45,7 @@ export class TerminalStore {
                 this._bootWebContainer(panel)
                     .then(async (webcontainerInstance) => {
                     panel.attachProcess(await newJSHProcess(webcontainerInstance, panel, panel.processOptions));
+                      this.terminalConfig.notify(this.terminalConfig.get());
                 })
                     .catch(() => {
                     // do nothing
diff --git a/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js b/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js
index e253906..9b1e4ba 100644
--- a/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js
+++ b/node_modules/@tutorialkit/runtime/dist/store/tutorial-runner.js
@@ -151,7 +151,7 @@ export class TutorialRunner {
      *
      * @see {LoadFilesOptions}
      */
-    prepareFiles({ files, template, signal, abortPreviousLoad = true }) {
+    prepareFiles({ files, template, signal, abortPreviousLoad = true, removePaths = undefined }) {
         const previousLoadPromise = this._currentLoadTask?.promise;
         if (abortPreviousLoad) {
             this._currentLoadTask?.cancel();
@@ -167,6 +167,16 @@ export class TutorialRunner {
             [template, files] = await Promise.all([template, files]);
             signal.throwIfAborted();
             if (this._currentFiles || this._currentTemplate) {
+                if (removePaths) {
+                  for(const path of removePaths) {
+                    for(const filePath of Object.keys(this._currentFiles)) {
+                      if (filePath.startsWith(path)) {
+                        delete this._currentFiles[filePath];
+                      }
+                    }
+                    await webcontainer.fs.rm(path, {recursive: true});
+                  }
+                }
                 await updateFiles(webcontainer, { ...this._currentTemplate, ...this._currentFiles }, { ...template, ...files });
             }
             else {
@@ -459,7 +469,7 @@ export class TutorialRunner {
             clearTimeout(timeoutId);
             timeoutId = setTimeout(readFiles, 100);
         };
-        this._watcher = webcontainer.fs.watch('.', { recursive: true }, (eventType, filename) => {
+        this._watcher = webcontainer.fs.watch('.', { recursive: true }, async (eventType, filename) => {
             const filePath = `/${filename}`;
             // events we should ignore because we caused them in the TutorialRunner
             if (!this._ignoreFileEvents.decrement(filePath)) {
@@ -499,7 +509,8 @@ export class TutorialRunner {
                         }
                     });
                     if (!this._editorStore.documents.get()[filePath]) {
-                        this._editorStore.addFileOrFolder({ path: filePath, type: 'file' });
+                        const isDirectory = await _isDirectory(webcontainer, filePath);
+                        this._editorStore.addFileOrFolder({ path: filePath, type: isDirectory ? 'folder' : 'file' });
                     }
                     this._updateCurrentFiles({ [filePath]: '' });
                     scheduleReadFor(filePath, 'utf-8');
@@ -543,3 +554,12 @@ async function updateFiles(webcontainer, previousFiles, newFiles) {
     }
     await webcontainer.mount(toFileTree(addedOrModified));
 }
+
+async function _isDirectory(webcontainer, filePath) {
+  try {
+    await webcontainer.fs.readdir(filePath);
+    return true;
+  } catch (error) {
+    return false;
+  }
+}
diff --git a/node_modules/@tutorialkit/runtime/dist/webcontainer/preview-info.js b/node_modules/@tutorialkit/runtime/dist/webcontainer/preview-info.js
index bab229f..021f13e 100644
--- a/node_modules/@tutorialkit/runtime/dist/webcontainer/preview-info.js
+++ b/node_modules/@tutorialkit/runtime/dist/webcontainer/preview-info.js
@@ -23,6 +23,9 @@ export class PreviewInfo {
         this.pathname = preview.pathname;
         this.portInfo = portInfo;
     }
+    set path(val) {
+      this.pathname = val;
+    }
     static parse(preview) {
         if (typeof preview === 'number') {
             return {
diff --git a/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js b/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js
index 046165d..c5d3e39 100644
--- a/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js
+++ b/node_modules/@tutorialkit/runtime/dist/webcontainer/shell.js
@@ -15,6 +15,9 @@ export async function newJSHProcess(webcontainer, terminal, options) {
             cols: terminal.cols ?? 80,
             rows: terminal.rows ?? 15,
         },
+        env: {
+          PATH: `${webcontainer.workdir}/bin:${webcontainer.path}`
+        },
     });
     const input = process.input.getWriter();
     const output = process.output;
