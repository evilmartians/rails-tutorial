diff --git a/node_modules/@tutorialkit/react/dist/Panels/EditorPanel.js b/node_modules/@tutorialkit/react/dist/Panels/EditorPanel.js
index 109e4eb..4906be4 100644
--- a/node_modules/@tutorialkit/react/dist/Panels/EditorPanel.js
+++ b/node_modules/@tutorialkit/react/dist/Panels/EditorPanel.js
@@ -61,6 +61,15 @@ function getFileIcon(fileName) {
         case 'json': {
             return 'i-languages-json?mask';
         }
+        case 'rb': {
+            return 'i-languages-ruby?mask';
+        }
+        case 'ru': {
+            return 'i-languages-ruby?mask';
+        }
+        case 'erb': {
+            return 'i-languages-erb?mask';
+        }
         case 'gif':
         case 'jpg':
         case 'jpeg':
diff --git a/node_modules/@tutorialkit/react/dist/Panels/PreviewPanel.js b/node_modules/@tutorialkit/react/dist/Panels/PreviewPanel.js
index 8fe0723..46d363c 100644
--- a/node_modules/@tutorialkit/react/dist/Panels/PreviewPanel.js
+++ b/node_modules/@tutorialkit/react/dist/Panels/PreviewPanel.js
@@ -1,7 +1,7 @@
 import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
 import { useStore } from '@nanostores/react';
 import { reloadPreview } from '@webcontainer/api/utils';
-import { createElement, forwardRef, memo, useCallback, useEffect, useImperativeHandle, useRef } from 'react';
+import { createElement, forwardRef, memo, useCallback, useState, useEffect, useImperativeHandle, useRef } from 'react';
 import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';
 import { BootScreen } from '../BootScreen.js';
 import resizePanelStyles from '../styles/resize-panel.module.css';
@@ -71,6 +71,8 @@ export const PreviewPanel = memo(forwardRef(({ showToggleTerminal, toggleTermina
 PreviewPanel.displayName = 'PreviewPanel';
 function Preview({ preview, iframe, previewCount, first, last, toggleTerminal, i18n }) {
     const previewContainerRef = useRef(null);
+    const [currentUrlPath, setCurrentUrlPath] = useState('');
+
     useEffect(() => {
         if (!iframe.ref) {
             return;
@@ -83,16 +85,122 @@ function Preview({ preview, iframe, previewCount, first, last, toggleTerminal, i
             iframe.ref.title = preview.title;
         }
     }, [preview.url, iframe.ref]);
+
+    useEffect(() => {
+        if (!iframe.ref) {
+            return;
+        }
+
+        const handleLoadMessage = (event) => {
+          if (event.data && event.data.type === '$locationChange') {
+            const iframeSrc = event.data.location.href;
+            if (iframeSrc) {
+              const url = new URL(iframeSrc);
+              const path = url.pathname.replace("/", "") + url.search;
+              setCurrentUrlPath(path);
+            }
+          }
+        };
+
+        window.addEventListener('message', handleLoadMessage);
+
+        return () => {
+          window.removeEventListener('message', handleLoadMessage);
+        };
+    }, [iframe.ref]);
+
     function reload() {
         if (iframe.ref) {
             reloadPreview(iframe.ref);
         }
     }
-    return (_jsxs("div", { className: "panel-container", children: [_jsxs("div", { className: classNames('panel-header border-b border-tk-elements-app-borderColor justify-between', {
-                    'border-l border-tk-elements-app-borderColor': !first,
-                }), children: [_jsxs("div", { className: "panel-title", children: [_jsx("button", { onClick: reload, title: i18n.reloadPreviewTitle, className: "panel-button rounded-full p-1.5 -my-1.5 -ml-2", children: _jsx("div", { className: "panel-icon i-ph-arrow-clockwise" }) }), _jsx("span", { className: "text-sm truncate", children: previewTitle(preview, previewCount, i18n) })] }), last && (_jsxs("button", { className: "panel-button px-2 py-0.5 -mr-1 -my-1", title: "Toggle Terminal", onClick: () => toggleTerminal?.(), children: [_jsx("div", { className: "panel-button-icon i-ph-terminal-window-duotone" }), _jsx("span", { className: "text-sm", children: i18n.toggleTerminalButtonText })] }))] }), _jsx("div", { ref: previewContainerRef, className: classNames('h-full w-full flex justify-center items-center', {
-                    'border-l border-tk-elements-previews-borderColor': !first,
-                }) })] }));
+
+    function open(newPath) {
+      if (!preview.url) return;
+
+      const baseUrl = new URL(preview.url);
+      const newUrl = new URL(newPath, baseUrl.origin);
+
+      if (iframe.ref) {
+        iframe.ref.src = newUrl.href;
+      }
+    }
+
+    const urlPath = currentUrlPath || (preview.url ? new URL(preview.url).pathname.replace("/", "") + new URL(preview.url).search : '');
+
+    return (
+        _jsxs("div", {
+            className: "panel-container",
+            children: [
+                _jsxs("div", {
+                    className: classNames('panel-header border-b border-tk-elements-app-borderColor justify-between', {
+                        'border-l border-tk-elements-app-borderColor': !first,
+                    }),
+                    children: [
+                        _jsxs("div", {
+                            className: "panel-title",
+                            children: [
+                                _jsx("button", {
+                                    onClick: reload,
+                                    title: i18n.reloadPreviewTitle,
+                                    className: "panel-button rounded-full p-1.5 -my-1.5 -ml-2",
+                                    children: _jsx("div", {
+                                        className: "panel-icon i-ph-arrow-clockwise"
+                                    })
+                                }),
+                                _jsx("span", {
+                                    className: "text-sm truncate",
+                                    children: previewTitle(preview, previewCount, i18n)
+                                })
+                            ]
+                        }),
+                        preview.url && _jsxs("div", {
+                            className: "flex items-center bg-gray-100 rounded px-2 py-1",
+                            children: [
+                                _jsx("span", {
+                                    className: "text-gray-500 text-sm",
+                                    children: "http://localhost:3000/"
+                                }),
+                                _jsx("input", {
+                                    type: "text",
+                                    value: urlPath,
+                                    onChange: (e) => setCurrentUrlPath(e.target.value),
+                                    className: "bg-transparent border-none focus:outline-none text-sm flex-1",
+                                    onKeyDown: (e) => {
+                                      if (e.key === 'Enter') {
+                                        open(e.target.value);
+                                      }
+                                    }
+                                })
+                            ]
+                        }),
+                        last && (
+                            _jsxs("button", {
+                                className: "panel-button px-2 py-0.5 -mr-1 -my-1",
+                                title: "Toggle Terminal",
+                                onClick: () => toggleTerminal?.(),
+                                children: [
+                                    _jsx("div", {
+                                        className: "panel-button-icon i-ph-terminal-window-duotone"
+                                    }),
+                                    _jsx("span", {
+                                        className: "text-sm",
+                                        children: i18n.toggleTerminalButtonText
+                                    })
+                                ]
+                            })
+                        )
+                    ]
+                }),
+                _jsx("div", {
+                    ref: previewContainerRef,
+                    className: classNames('h-full w-full flex justify-center items-center', {
+                        'border-l border-tk-elements-previews-borderColor': !first,
+                    })
+                })
+            ]
+        })
+    );
 }
 function requestAnimationFrameLoop(loop) {
     let handle;
diff --git a/node_modules/@tutorialkit/react/dist/core/CodeMirrorEditor/languages.js b/node_modules/@tutorialkit/react/dist/core/CodeMirrorEditor/languages.js
index ed5edcb..8ede98e 100644
--- a/node_modules/@tutorialkit/react/dist/core/CodeMirrorEditor/languages.js
+++ b/node_modules/@tutorialkit/react/dist/core/CodeMirrorEditor/languages.js
@@ -1,4 +1,4 @@
-import { LanguageDescription } from '@codemirror/language';
+import { LanguageDescription, LanguageSupport, StreamLanguage } from '@codemirror/language';
 export const supportedLanguages = [
     LanguageDescription.of({
         name: 'TS',
@@ -91,6 +91,23 @@ export const supportedLanguages = [
             return import('@replit/codemirror-lang-svelte').then((module) => module.svelte());
         },
     }),
+    LanguageDescription.of({
+        name: 'Ruby',
+        extensions: ['rb', 'rake', 'erb'],
+        filename: /(Gemfile|Rakefile|config\.ru|bin\/(rails|rubocop))/,
+        async load() {
+            return import('@codemirror/legacy-modes/mode/ruby').then((module) => {
+                return new LanguageSupport(StreamLanguage.define(module.ruby));
+            });
+        },
+    }),
+    LanguageDescription.of({
+        name: 'YAML',
+        extensions: ['yaml', 'yml'],
+        async load() {
+            return import('@codemirror/lang-yaml').then((module) => module.yaml());
+        },
+    }),
 ];
 export async function getLanguage(fileName) {
     const languageDescription = LanguageDescription.matchFilename(supportedLanguages, fileName);
diff --git a/node_modules/@tutorialkit/react/dist/core/FileTree.js b/node_modules/@tutorialkit/react/dist/core/FileTree.js
index 900cbd7..7bfb6b5 100644
--- a/node_modules/@tutorialkit/react/dist/core/FileTree.js
+++ b/node_modules/@tutorialkit/react/dist/core/FileTree.js
@@ -9,9 +9,10 @@ export function FileTree({ files, onFileSelect, onFileChange, allowEditPatterns,
     const fileList = useMemo(() => buildFileList(files, hideRoot, scope, computedHiddenFiles), [files, hideRoot, scope, computedHiddenFiles]);
     const [collapsedFolders, setCollapsedFolders] = useState(() => new Set());
     // reset collapsed folders when the list of files changes
-    useEffect(() => {
-        setCollapsedFolders(new Set());
-    }, [files]);
+    // But why????
+    // useEffect(() => {
+    //     setCollapsedFolders(new Set());
+    // }, [files]);
     const filteredFileList = useMemo(() => {
         const list = [];
         let lastDepth = Number.MAX_SAFE_INTEGER;
@@ -188,4 +189,7 @@ const extensionsToIcons = new Map([
     ['jpeg', 'i-ph-file-image-duotone'],
     ['png', 'i-ph-file-image-duotone'],
     ['svg', 'i-ph-file-svg-duotone'],
+    ['rb', 'i-phosphor-file-rb'],
+    ['ru', 'i-phosphor-file-rb'],
+    ['erb', 'i-phosphor-file-erb'],
 ]);
